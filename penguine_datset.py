# -*- coding: utf-8 -*-
"""penguine datset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1udGIFpymX7wQOedV_mWwxmpi1nxVWOag
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler


df = pd.read_csv('/content/dataset.csv')

"""#1. Identify missing or incorrect data in the dataset and apply appropriate preprocessing steps to clean it (code and explanation)"""

print("Missing \t\tNo")
print(df.isnull().sum())
missing_rows = df[df.isnull().any(axis=1)]
print("\n")
print(missing_rows)
missing_rows.to_csv("missing_rows.csv", index=False)

# Calculate the mean for each numerical column
mean_bill_length = df['bill_length_mm'].mean()
mean_bill_depth = df['bill_depth_mm'].mean()
mean_flipper_length = df['flipper_length_mm'].mean()
mean_body_mass = df['body_mass_g'].mean()

# Fill missing values with the calculated means (direct assignment to avoid inplace warning)
df['bill_length_mm'] = df['bill_length_mm'].fillna(mean_bill_length)
df['bill_depth_mm'] = df['bill_depth_mm'].fillna(mean_bill_depth)
df['flipper_length_mm'] = df['flipper_length_mm'].fillna(mean_flipper_length)
df['body_mass_g'] = df['body_mass_g'].fillna(mean_body_mass)

# Print the updated DataFrame
print(df)

malecount = df['sex'].value_counts()['male']
femalecount = df['sex'].value_counts()['female']

print("Number of males:", malecount)
print("Number of females:", femalecount)

df.dropna(subset=['sex'], inplace=True)
print(df)

"""# 2. What is the average body_mass_g for Gentoo penguins? (code)"""

gentoo_avg_body_mass = df[df['species'] == 'Gentoo']['body_mass_g'].mean()

print("Average body mass of Gentoo penguins:", gentoo_avg_body_mass)

"""# 3. How do the distributions of bill_length_mm and bill_depth_mm differ between the three penguin species? Analyze the skewness and kurtosis of each feature for different species. (code and explanation)"""

#plot
sns.histplot(data=df, x='bill_length_mm', hue='species', kde=True, alpha=0.5)
plt.title('Distribution of Bill Length by Species')
plt.show()

sns.histplot(data=df, x='bill_depth_mm', hue='species', kde=True, alpha=0.5)
plt.title('Distribution of Bill Depth by Species')
plt.show()

for species in df['species'].unique():
    species_data = df[df['species'] == species]
    skewness_billlength = species_data['bill_length_mm'].skew()
    kurtosis_billlength = species_data['bill_length_mm'].kurtosis()
    skewness_billdepth = species_data['bill_depth_mm'].skew()
    kurtosis_billdepth = species_data['bill_depth_mm'].kurtosis()

    print(f"For {species} penguins:")
    print(f"  Skewness of bill length: {skewness_billlength:.2f}")
    print(f"  Kurtosis of bill length: {kurtosis_billlength:.2f}")
    print(f"  Skewness of bill depth: {skewness_billdepth:.2f}")
    print(f"  Kurtosis of bill depth: {kurtosis_billdepth:.2f}")
    print()

# Statistical tests to compare distributions (e.g., Kolmogorov-Smirnov test)
# ...

"""### Inference :
Skewness: Adelie: A slightly longer tail to the right is indicated by a somewhat positively skewed bill length and depth. Gentoo: A longer tail to the right is suggested by the bill's significantly positive skew. There is a minor positive skew in bill depth. Chinstrap: A longer tail to the left is indicated by a somewhat negatively skewed bill length. The depth of the bill is nearly symmetrical.

Kurtosis
Adelie: Compared to a normal distribution, their bill length and depth are somewhat platykurtic, with flatter peaks and lighter tails. Gentoo: A more peaked distribution with heavier tails is indicated by a significantly leptokurtic bill length. The depth of the bill is a little platykurtic. Chinstrap: The depth of the bill is more platykurtic than the length.

Overall Interpretation:

Adelie: Adelie penguins have a fairly symmetrical and flat-tailed distribution of beak length and depth. Gentoo: Gentoo penguins have a larger tail to the right and a more varied bill length. The depth of the bill is flat-tailed and comparatively symmetrical. Chinstrap: Chinstrap penguins' beak length and depth distributions are comparatively symmetrical, with the latter being somewhat flatter-tailed.

These variations in bill length and depth distributions may be caused by ecological variables including competition, habitat, or food. Gentoo penguins, for example, may have a greater variety of bill sizes to accept various food sources or to adjust to changing environmental conditions.

#4. Identify which features in the dataset have outliers. Provide the method used to detect them and visualize the outliers. (code and explanation)
"""

# Column outliers
columns_to_check = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']

# outliers using IQR
def detect_outliers(data):
    q1, q3 = np.percentile(data, [25, 75])
    iqr = q3 - q1
    lower_bound = q1 - (1.5 * iqr)
    upper_bound = q3 + (1.5 * iqr)
    outliers = data[(data < lower_bound) | (data > upper_bound)]
    return outliers

# Outlier in each column
for column in columns_to_check:
    outliers = detect_outliers(df[column])
    print(f"Outliers in {column} :  {outliers }")

"""### EXPLANATION:

To find outliers, the code use the Interquartile Range (IQR) technique. The range between a dataset's first quartile (Q1) and third quartile (Q3) is determined using this method. An outlier is any data point that is above (Q3 + 1.5)* IQR or below (Q1 - 1.5) * IQR.

No Outliers in Bill Length, Depth, or Flipper Length: The report indicates that these columns did not contain any outliers. This implies that the data for these attributes has a normal or nearly normal distribution and is generally well-behaved.

Body Mass Outliers: Three outliers were found in the body_mass_g column by the code. The dataset's other values are far smaller than these three values (15000.0, 12000.0, and 10000.0).

#### Visualize these outliers:
"""

# Visualization
plt.figure(figsize=(6, 6))
sns.boxplot(data=df[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']])
plt.title('Box Plot of Numerical Features')
plt.xlabel('Features')
plt.ylabel('Values')
plt.show()

"""# 5. Does this dataset contribute to the curse of dimensionality? If yes perform PCA. (code and explanation required)

The curse of dimensionality refers to the phenomenon where the performance of machine learning algorithms 1  deteriorates as the number 2  of features increases.

This happens due to noise and overfitting, computational complexity

While the penguin dataset has several features, the number of features is relatively small compared to many real-world datasets. Therefore, the curse of dimensionality is not a major concern in this specific case.
"""

#Featuers
numerical_features = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']
X = df[numerical_features]

#Missing value
X = X.fillna(X.mean())

#Standard value
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

#PCA
pca = PCA()
pca.fit(X_scaled)

#Variance ratio
explained_variance_ratio = pca.explained_variance_ratio_
print("Explained Variance Ratio:", explained_variance_ratio)

# Cumulative explained variance ratio
cumulative_variance_ratio = np.cumsum(explained_variance_ratio)
print("Cumulative Explained Variance Ratio:", cumulative_variance_ratio)

# Visualization
plt.plot(range(1, len(cumulative_variance_ratio) + 1), cumulative_variance_ratio, marker='o')
plt.xlabel('Number of Components')
plt.ylabel('Cumulative Explained Variance')
plt.title('Cumulative Explained Variance Ratio')
plt.grid()
plt.show()

"""# 6. Use bill_length_mm vs bill_depth_mm and plot 7 different graphs to visualize them. (code)"""

#Scatter Plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='bill_length_mm', y='bill_depth_mm', data=df, hue='species')
plt.title('Scatter Plot of Bill Length vs Bill Depth')
plt.xlabel('Bill Length (mm)')
plt.ylabel('Bill Depth (mm)')
plt.show()

#Pair Plot
sns.pairplot(df[['bill_length_mm', 'bill_depth_mm', 'species']], hue='species')
plt.show()

#Joint Plot
sns.jointplot(x='bill_length_mm', y='bill_depth_mm', data=df, kind='kde')
plt.show()

#Box Plot
plt.figure(figsize=(10, 6))
sns.boxplot(x='species', y='bill_length_mm', data=df)
plt.title('Box Plot of Bill Length by Species')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='species', y='bill_depth_mm', data=df)
plt.title('Box Plot of Bill Depth by Species')
plt.show()

#Violin Plot
plt.figure(figsize=(10, 6))
sns.violinplot(x='species', y='bill_length_mm', data=df)
plt.title('Violin Plot of Bill Length by Species')
plt.show()

plt.figure(figsize=(10, 6))
sns.violinplot(x='species', y='bill_depth_mm', data=df)
plt.title('Violin Plot of Bill Depth by Species')
plt.show()

#Swarm Plot
plt.figure(figsize=(10, 6))
sns.swarmplot(x='species', y='bill_length_mm', data=df)
plt.title('Swarm Plot of Bill Length by Species')
plt.show()

plt.figure(figsize=(10, 6))
sns.swarmplot(x='species', y='bill_depth_mm', data=df)
plt.title('Swarm Plot of Bill Depth by Species')
plt.show()

#Correlation Plot
corr_matrix = df[['bill_length_mm', 'bill_depth_mm']].corr()
sns.heatmap(corr_matrix, annot=True)
plt.title('Correlation Matrix')
plt.show()

"""# 7. Find the maximum flipper_length_mm for each combination of species and island. Which species has the longest flippers on each island? (code)"""

#Group
max_flipper_length = df.groupby(['species', 'island'])['flipper_length_mm'].max()
print(max_flipper_length)

#Visualize
plt.figure(figsize=(10, 6))
sns.barplot(x='island', y='flipper_length_mm', hue='species', data=df)
plt.title('Maximum Flipper Length by Species and Island')
plt.xlabel('Island')
plt.ylabel('Maximum Flipper Length (mm)')
plt.show()

"""#### From the given data, we can see that:

Adelie penguins:
Have the longest flipper length of 208.0 mm on Dream Island.
Chinstrap penguins:
Have the longest flipper length of 212.0 mm on Dream Island.
Gentoo penguins:
Have the longest flipper length of 231.0 mm on Biscoe Island.
Therefore, the species with the longest flippers on each island are:

Biscoe Island: Gentoo penguins (231.0 mm)
Dream Island: Chinstrap penguins (212.0 mm)
Torgersen Island: Adelie penguins (202.0 mm)

# 8. Perform z-score normalization on this dataset. (code)
"""

numerical_features = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']
scaler = StandardScaler()
df[numerical_features] = scaler.fit_transform(df[numerical_features])
print(df.head())